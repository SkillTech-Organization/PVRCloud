//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace PVRPCloudApi;

using Microsoft.AspNetCore.Mvc;
using PVRPCloud;
using PVRPCloudApi.Attributes;
using PVRPCloudApi.DTO.Request;
using PVRPCloudApi.Handlers;
using System = global::System;

[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

public partial class PVRPCloudApiController : Microsoft.AspNetCore.Mvc.ControllerBase
{
    private IPVRPCloudApiHandler _implementation;

    public PVRPCloudApiController(IPVRPCloudApiHandler PvrpCloudApiHandler)
    {
        _implementation = PvrpCloudApiHandler;
    }

    /// <summary>
    /// Calculate by PVRPCloudSupporter engine
    /// </summary>
    /// <param name="body"></param>
    /// <param name="maxTruckDistance"></param>
    /// <returns></returns>
    // [ApiKey]
    [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/v1/PVRPCloudSupporter/PVRPCloudSupport")]
    public async Task<ActionResult<PVRPCloudResponse>> PVRPCloudSupport([Microsoft.AspNetCore.Mvc.FromBody] PVRPCloudSupportRequest body)
    {
        var result = await _implementation.PVRCloudSupportAsync(body, CancellationToken.None);

        if (result.HasError)
        {
            return new BadRequestObjectResult(result);
        }
        else
        {
            return new OkObjectResult(result);
        }
    }

    /// <summary>
    /// Get calculation result
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    // [ApiKey]
    [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/v1/PVRPCloudSupporter/Result/{id}")]
    public async Task<ActionResult<PVRPCloudResponse>> Result([FromRoute] string id)
    {
        var result = await _implementation.Result(id);
        return new OkObjectResult(result);
    }

    /// <summary>
    /// Calculate by PVRPCloudSupporterX engine
    /// </summary>
    /// <param name="body"></param>
    /// <param name="maxTruckDistance"></param>
    /// <returns></returns>
    // [ApiKey]
    [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/v1/PVRPCloudSupporter/PVRPCloudSupportX")]
    public async Task<ActionResult<PVRPCloudResponse>> PVRPCloudSupportX([Microsoft.AspNetCore.Mvc.FromBody] PVRPCloudSupportRequest body)
    {
        var result = await _implementation.PVRCloudSupportXAsync(body, CancellationToken.None);

        if (result.HasError)
        {
            return new BadRequestObjectResult(result);
        }
        else
        {
            return new OkObjectResult(result);
        }
    }

    /// <summary>
    /// get the 'isalive' status of the PVRPCloudSupporter service
    /// </summary>
    /// <returns></returns>
    // [ApiKey]
    [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("IsAlive")]
    public System.Threading.Tasks.Task IsAlive()
    {
        return _implementation.IsAliveAsync(CancellationToken.None);
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603
