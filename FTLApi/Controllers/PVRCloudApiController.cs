//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace FTLApi
{
    using FTLApi.Attributes;
    using FTLApi.DTO.Request;
    using FTLApi.Handlers;
    using FTLSupporter;
    using Microsoft.AspNetCore.Mvc;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class FTLApiController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IFTLApiHandler _implementation;

        public FTLApiController(IFTLApiHandler fTLApiHandler)
        {
            _implementation = fTLApiHandler;
        }

        /// <summary>
        /// Calculate by FTLSupporter engine
        /// </summary>
        /// <param name="body"></param>
        /// <param name="maxTruckDistance"></param>
        /// <returns></returns>
        [ApiKey]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/v1/FTLSupporter/FTLSupport")]
        public async Task<ActionResult<FTLResponse>> FTLSupport([Microsoft.AspNetCore.Mvc.FromBody] FTLSupportRequest body)
        {
            var result = await _implementation.FTLSupportAsync(body, CancellationToken.None);
            
            if (result.HasError)
            {
                return new BadRequestObjectResult(result);
            }
            else
            {
                return new OkObjectResult(result);
            }
        }

        /// <summary>
        /// Get calculation result
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [ApiKey]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/v1/FTLSupporter/Result/{id}")]
        public async Task<ActionResult<FTLResponse>> Result([FromRoute] string id)
        {
            var result = await _implementation.Result(id);
            return new OkObjectResult(result);
        }

        /// <summary>
        /// Calculate by FTLSupporterX engine
        /// </summary>
        /// <param name="body"></param>
        /// <param name="maxTruckDistance"></param>
        /// <returns></returns>
        [ApiKey]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/v1/FTLSupporter/FTLSupportX")]
        public async Task<ActionResult<FTLResponse>> FTLSupportX([Microsoft.AspNetCore.Mvc.FromBody] FTLSupportRequest body)
        {
            var result = await _implementation.FTLSupportXAsync(body, CancellationToken.None);

            if (result.HasError)
            {
                return new BadRequestObjectResult(result);
            }
            else
            {
                return new OkObjectResult(result);
            }
        }

        /// <summary>
        /// get the 'isalive' status of the FTLSupporter service
        /// </summary>
        /// <returns></returns>
        [ApiKey]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("IsAlive")]
        public System.Threading.Tasks.Task IsAlive()
        {
            return _implementation.IsAliveAsync(CancellationToken.None);
        }

    }

    


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603