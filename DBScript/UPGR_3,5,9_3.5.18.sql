DROP TABLE CITY_NAME
go
DROP VIEW CityNames
go
DROP VIEW ViewMap
go

alter table HST_HISTORY add HST_ITEMID TY_ID
go
drop table PDT_PATHDETAIL
go
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[v_PLTOURKMCOST]')) 
 DROP VIEW [dbo].[v_PLTOURKMCOST] 
go
CREATE VIEW [dbo].[v_PLTOURKMCOST] 
AS 
select TPL.ID AS TPL_ID, PTPS.PTP_ORDER, 
    sum(PTPA.PTP_DISTANCE) AS DIST, 
    TFP.TFP_FIXCOST + SUM(PTPA.PTP_DISTANCE/1000)    * TFP.TFP_KMCOST AS KMCOST, 
    TFPINC.TFP_FIXCOST + SUM(PTPA.PTP_DISTANCE/1000) * TFPINC.TFP_KMCOST AS KMCOST_INC, 
    TFPOUT.TFP_FIXCOST + SUM(PTPA.PTP_DISTANCE/1000) * TFPOUT.TFP_KMCOST AS KMCOST_OUT 
from dbo.TPL_TRUCKPLAN TPL 
inner join dbo.TRK_TRUCK TRK      ON TPL.TRK_ID = TRK.ID 
inner join dbo.TFP_TARIFFPROF TFP ON TRK.TFP_ID = TFP.ID 
left join  TFP_TARIFFPROF TFPINC  ON TRK.TFP_ID_INC = TFPINC.ID 
left join  TFP_TARIFFPROF TFPOUT  ON TRK.TFP_ID_OUT = TFPOUT.ID 
inner join dbo.PTP_PLANTOURPOINT PTPS ON PTPS.TPL_ID = TPL.ID AND PTPS.PTP_TYPE = 0 
inner join dbo.PTP_PLANTOURPOINT PTPE ON  PTPE.TPL_ID = TPL.ID AND PTPE.PTP_ORDER = 
        (select min(PTP.PTP_ORDER) 
      from PTP_PLANTOURPOINT PTP 
      where PTP.TPL_ID = TPL.ID AND 
           PTP.PTP_ORDER > PTPS.PTP_ORDER AND 
           PTP.PTP_TYPE = 1) 
inner join dbo.PTP_PLANTOURPOINT PTPA ON  PTPA.TPL_ID = TPL.ID AND  PTPA.PTP_ORDER >= PTPS.PTP_ORDER AND PTPA.PTP_ORDER <= PTPE.PTP_ORDER 
group by TPL.ID, TRK.TRK_REG_NUM, PTPS.PTP_ORDER, 
    TFP.TFP_FIXCOST, TFP.TFP_KMCOST, TFPINC.TFP_FIXCOST, 
    TFPINC.TFP_KMCOST, TFPOUT.TFP_FIXCOST, 
    TFPOUT.TFP_KMCOST 
go
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[v_PLTOURHOURCOST]')) 
DROP VIEW [dbo].[v_PLTOURHOURCOST]
go
CREATE VIEW [dbo].[v_PLTOURHOURCOST] 
AS 
SELECT TPL.ID AS TPL_ID, PTPS.ID as START_PTP_ID, (datediff( mi, PTPS.PTP_ARRTIME, PTPE.PTP_DEPTIME)+1)*TFP.TFP_HOURCOST/60 as HOURCOST 
FROM dbo.TPL_TRUCKPLAN TPL 
inner join TRK_TRUCK      TRK on TPL.TRK_ID = TRK.ID 
inner join TFP_TARIFFPROF TFP on TRK.TFP_ID = TFP.ID 
inner join PTP_PLANTOURPOINT PTPS on PTPS.TPL_ID = TPL.ID and PTPS.PTP_TYPE = 0 
inner join PTP_PLANTOURPOINT PTPE on PTPE.TPL_ID = TPL.ID and PTPE.PTP_ORDER = 
          (select min(PTP_ORDER) as Expr1 
            from  PTP_PLANTOURPOINT as PTP 
            where (TPL_ID = TPL.ID) and (PTP_ORDER > PTPS.PTP_ORDER) and (PTP_TYPE = 1)) 
go
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TRZ_TRUCKRESTRZONE]') AND name = N'IX_TRZ_TRUCKRESTRZONE') 
DROP INDEX [IX_TRZ_TRUCKRESTRZONE] ON [dbo].[TRZ_TRUCKRESTRZONE] WITH ( ONLINE = OFF )
go
CREATE NONCLUSTERED INDEX [IX_TRZ_TRUCKRESTRZONE] ON [dbo].[TRZ_TRUCKRESTRZONE] 
(         [RZN_ID] Asc) 
WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY] 
go
alter table CTP_CARGOTYPE add CTP_CODE TY_NAME
go
update CTP_CARGOTYPE set CTP_CODE = convert( varchar(40), ID)
go
CREATE NONCLUSTERED INDEX [INX_EDG_NOD_NUM] 
ON [dbo].[EDG_EDGE] ([NOD_NUM]) 
INCLUDE ([ID],[EDG_STRNUM1],[EDG_STRNUM2],[EDG_STRNUM3],[EDG_STRNUM4],[EDG_NAME_ENC]) 
go
CREATE NONCLUSTERED INDEX [INX_EDG_NOD_NUM2] 
ON [dbo].[EDG_EDGE] ([NOD_NUM2]) 
INCLUDE ([ID],[EDG_STRNUM1],[EDG_STRNUM2],[EDG_STRNUM3],[EDG_STRNUM4],[EDG_NAME_ENC])
go
ALTER TABLE NOD_NODE DROP COLUMN NOD_SPPDIST
go
alter table OTP_ORDERTYPE add OTP_CODE TY_NAME
go
update OTP_ORDERTYPE set OTP_CODE = convert( varchar(40), ID)
go
ALTER TABLE ORD_ORDER DROP COLUMN ODS_ID
go
ALTER TABLE ORD_ORDER DROP COLUMN ORD_SERVTIME
go
CREATE NONCLUSTERED INDEX [IX_ORD_OTP_ID] 
ON [dbo].[ORD_ORDER] ([OTP_ID]) 
Include ([ID]) 
go
